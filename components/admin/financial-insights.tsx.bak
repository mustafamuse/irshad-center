"use client";

import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { formatCurrency } from "@/lib/utils";
import { 
  TrendingUp, 
  TrendingDown, 
  AlertTriangle,
  Clock,
  DollarSign,
  AlertCircle,
  Users
} from "lucide-react";
import type { DashboardStats, PaymentPattern, FinancialHealth } from "@/lib/types";

interface FinancialInsightsProps {
  stats: DashboardStats;
}

const defaultPaymentPatterns = {
  totalLatePayments: 0,
  customersWithLatePayments: 0,
  averagePaymentDelay: 0,
  riskiestCustomers: [] as PaymentPattern[],
  paymentMethodStats: {
    ach: { total: 0, successful: 0, rate: 0 },
    card: { total: 0, successful: 0, rate: 0 }
  }
};

const defaultFinancialHealth: FinancialHealth = {
  revenueStability: {
    score: 0,
    trend: 'stable' as const,
    volatility: 0
  },
  cashFlow: {
    currentMonth: 0,
    nextMonthPrediction: 0,
    predictedGrowth: 0,
    riskFactors: []
  },
  revenueTargets: {
    monthlyTarget: 0,
    currentProgress: 0,
    projectedRevenue: 0,
    shortfall: 0,
    isOnTrack: true
  }
};

export function FinancialInsights({ stats }: FinancialInsightsProps) {
  const paymentPatterns = stats?.paymentPatterns || defaultPaymentPatterns;
  const financialHealth = stats?.financialHealth || defaultFinancialHealth;

  const { revenueStability, cashFlow, revenueTargets } = financialHealth;

  return (
    <div className="mt-8 space-y-6">
      <h2 className="text-lg font-semibold">Financial Insights</h2>
      
      <div className="grid gap-6 md:grid-cols-2">
        {/* Payment Patterns Card */}
        <Card className="p-6">
          <h3 className="text-sm font-medium text-muted-foreground mb-4">
            Payment Patterns
          </h3>
          
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <div>
                <div className="text-sm font-medium">Late Payments</div>
                <div className="text-2xl font-bold">{paymentPatterns.totalLatePayments}</div>
              </div>
              {paymentPatterns.totalLatePayments > 0 && (
                <Clock className="h-5 w-5 text-yellow-500" />
              )}
            </div>

            <div>
              <div className="text-sm font-medium mb-2">Riskiest Customers</div>
              <div className="space-y-2">
                {paymentPatterns.riskiestCustomers.map(customer => (
                  <div key={customer.customerId} className="flex items-center justify-between">
                    <div className="text-sm">
                      {customer.customerName || 'Unknown'}
                      <Badge 
                        variant="outline" 
                        className="ml-2 bg-red-50 text-red-700"
                      >
                        Risk: {customer.riskScore.toFixed(0)}%
                      </Badge>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <div>
              <div className="text-sm font-medium mb-2">Payment Method Success</div>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <div className="text-sm text-muted-foreground">ACH</div>
                  <div className="text-lg font-medium">
                    {(paymentPatterns.paymentMethodStats.ach.rate * 100).toFixed(1)}%
                  </div>
                </div>
                <div>
                  <div className="text-sm text-muted-foreground">Card</div>
                  <div className="text-lg font-medium">
                    {(paymentPatterns.paymentMethodStats.card.rate * 100).toFixed(1)}%
                  </div>
                </div>
              </div>
            </div>
          </div>
        </Card>

        {/* Financial Health Card */}
        <Card className="p-6">
          <h3 className="text-sm font-medium text-muted-foreground mb-4">
            Financial Health
          </h3>
          
          <div className="space-y-4">
            <div>
              <div className="text-sm font-medium">Revenue Stability</div>
              <div className="flex items-center gap-2">
                <div className="text-2xl font-bold">
                  {revenueStability.score.toFixed(1)}%
                </div>
                {revenueStability.trend === 'increasing' ? (
                  <TrendingUp className="h-5 w-5 text-green-500" />
                ) : (
                  <TrendingDown className="h-5 w-5 text-red-500" />
                )}
              </div>
            </div>

            <div>
              <div className="text-sm font-medium mb-2">Revenue Forecast</div>
              <div className="space-y-2">
                <div className="flex justify-between items-center">
                  <div className="text-sm text-muted-foreground">Current Month</div>
                  <div className="font-medium">
                    {formatCurrency(cashFlow.currentMonth)}
                  </div>
                </div>
                <div className="flex justify-between items-center">
                  <div className="text-sm text-muted-foreground">Next Month (Predicted)</div>
                  <div className="font-medium">
                    {formatCurrency(cashFlow.nextMonthPrediction)}
                  </div>
                </div>
                <div className="flex justify-between items-center">
                  <div className="text-sm text-muted-foreground">Growth Rate</div>
                  <div className="font-medium">
                    {cashFlow.predictedGrowth.toFixed(1)}%
                  </div>
                </div>
              </div>
            </div>

            {!revenueTargets.isOnTrack && (
              <div className="bg-yellow-50 dark:bg-yellow-900/20 p-4 rounded-lg">
                <div className="flex items-center gap-2 text-yellow-700 dark:text-yellow-500">
                  <AlertTriangle className="h-5 w-5" />
                  <div className="text-sm font-medium">Revenue Target Alert</div>
                </div>
                <div className="mt-2 text-sm text-yellow-600 dark:text-yellow-400">
                  Currently {revenueTargets.currentProgress.toFixed(1)}% of monthly target.
                  Shortfall: {formatCurrency(revenueTargets.shortfall)}
                </div>
              </div>
            )}
          </div>
        </Card>
      </div>
    </div>
  );
} 