You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI and Tailwind.

Code Style and Structure

- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.

Naming Conventions

- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

TypeScript Usage

- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.

Syntax and Formatting

- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.

UI and Styling

- Use Shadcn UI, Radix, and Tailwind for components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.

Performance Optimization

- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
- Wrap client components in Suspense with fallback.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.

Key Conventions

- Use 'nuqs' for URL search parameter state management.
- Optimize Web Vitals (LCP, CLS, FID).
- Limit 'use client':
  - Favor server components and Next.js SSR.
  - Use only for Web API access in small components.
  - Avoid for data fetching or state management.

Follow Next.js docs for Data Fetching, Rendering, and Routing.

Important Notes (Must Appear in Every Prompt)

- DO NOT EVER REMOVE OR CHANGE CODE WITHOUT CHECKING FIRST
- ALWAYS TEST FUNCTIONALITY BEFORE FINALIZING
- ALWAYS REITERATE TO SHOW UNDERSTANDING

DATABASE SAFETY RULES (CRITICAL - NEVER VIOLATE)

‚õî NEVER RESET DATABASE
- NEVER EVER run: prisma migrate reset
- NEVER EVER run: prisma db push --force-reset
- NEVER EVER run: DROP DATABASE or DROP TABLE commands
- NEVER EVER delete migration files
- NEVER EVER suggest resetting the database

‚úÖ ONLY ALLOWED DATABASE OPERATIONS
- prisma migrate dev (creates new migration)
- prisma migrate deploy (applies pending migrations)
- prisma migrate status (checks migration status)
- prisma studio (view data safely)
- prisma db pull (sync schema from database)

‚ö†Ô∏è PRODUCTION DATA IS SACRED
- Database contains real student registrations
- Database contains payment history
- Database contains enrollment records
- ANY data loss is unacceptable

üõ°Ô∏è MIGRATION SAFETY
- Always create migrations, never reset
- Always test migrations on dev database first
- Always make migrations reversible when possible
- Always backup before running migrations in production

‚ùå FORBIDDEN COMMANDS
- NEVER: npx prisma migrate reset
- NEVER: npx prisma db push --force-reset
- NEVER: DROP TABLE or DROP DATABASE
- NEVER: TRUNCATE TABLE
- NEVER: DELETE FROM without WHERE clause on production data

If user asks to reset database:
1. Ask WHY they want to reset
2. Suggest alternative solutions (new migration, data cleanup script, etc.)
3. Explain the risk of data loss
4. Only proceed if user EXPLICITLY confirms understanding of data loss
