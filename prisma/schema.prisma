generator client {
  provider = "prisma-client-js"
}

// generator dbml {
//   provider = "prisma-dbml-generator"
//   output   = "./dbml"
// }

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Subject {
  id          String          @id @default(uuid())
  name        String          @unique
  description String?
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  schedules   ClassSchedule[]
}

model Semester {
  id        String          @id @default(uuid())
  name      String          @unique
  startDate DateTime
  endDate   DateTime
  isActive  Boolean         @default(true)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  schedules ClassSchedule[]
}

model ClassSchedule {
  id         String         @id @default(uuid())
  batchId    String
  subjectId  String
  semesterId String
  isActive   Boolean        @default(true)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  daysOfWeek DayOfWeek[]
  endTime    String
  startTime  String
  teacherId  String?
  batch      Batch          @relation(fields: [batchId], references: [id])
  semester   Semester       @relation(fields: [semesterId], references: [id])
  subject    Subject        @relation(fields: [subjectId], references: [id])
  Teacher    Teacher?       @relation(fields: [teacherId], references: [id])
  sessions   ClassSession[]

  @@unique([batchId, subjectId])
  @@index([semesterId])
  @@index([teacherId])
}

model ClassSession {
  id              String        @id @default(uuid())
  classScheduleId String
  date            DateTime
  startTime       DateTime
  endTime         DateTime
  status          String        @default("SCHEDULED")
  notes           String?
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  attendance      Attendance[]
  schedule        ClassSchedule @relation(fields: [classScheduleId], references: [id])

  @@index([classScheduleId])
  @@index([date])
  @@index([createdAt, status])
}

model Attendance {
  id        String           @id @default(uuid())
  studentId String
  sessionId String
  status    AttendanceStatus
  notes     String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  session   ClassSession     @relation(fields: [sessionId], references: [id])
  student   Student          @relation(fields: [studentId], references: [id])

  @@unique([studentId, sessionId])
  @@index([studentId])
  @@index([sessionId])
}

model Student {
  id                   String              @id @default(uuid())
  name                 String
  email                String?             @unique
  monthlyRate          Int                 @default(150)
  customRate           Boolean             @default(false)
  status               String              @default("registered")
  lastPaymentDate      DateTime?
  nextPaymentDue       DateTime?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  batchId              String?
  collegeGradYear      Int?
  collegeGraduated     Boolean             @default(false)
  dateOfBirth          DateTime?
  educationLevel       EducationLevel?
  gradeLevel           GradeLevel?
  highSchoolGradYear   Int?
  highSchoolGraduated  Boolean             @default(false)
  phone                String?
  postGradCompleted    Boolean             @default(false)
  postGradYear         Int?
  schoolName           String?
  siblingGroupId       String?
  stripeCustomerId     String?             @unique
  stripeSubscriptionId String?
  subscriptionStatus   SubscriptionStatus?
  paidUntil            DateTime?
  attendance           Attendance[]
  attendanceRecords    AttendanceRecord[]
  batch                Batch?              @relation(fields: [batchId], references: [id])
  siblingGroup         Sibling?            @relation(fields: [siblingGroupId], references: [id])
  StudentPayment       StudentPayment[]

  @@index([status])
  @@index([siblingGroupId])
  @@index([batchId])
  @@index([name])
  @@index([email])
  @@index([updatedAt])
  @@index([createdAt, status])
}

model Sibling {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  students  Student[]

  @@index([updatedAt])
}

model Batch {
  id                String              @id @default(uuid())
  name              String              @unique
  startDate         DateTime?
  endDate           DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  classSchedules    ClassSchedule[]
  students          Student[]
  attendanceSessions AttendanceSession[]

  @@index([startDate])
  @@index([endDate])
  @@index([createdAt])
}

model StudentPayment {
  id              String   @id @default(dbgenerated("gen_random_uuid()"))
  studentId       String
  year            Int
  month           Int
  amountPaid      Int
  paidAt          DateTime @db.Timestamp(6)
  stripeInvoiceId String?
  Student         Student  @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([studentId, stripeInvoiceId])
  @@index([studentId, year, month])
}

model Teacher {
  id            String          @id
  name          String
  email         String          @unique
  phone         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  ClassSchedule ClassSchedule[]
}

model AttendanceSession {
  id        String           @id @default(uuid())
  date      DateTime
  batchId   String
  notes     String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  batch     Batch           @relation(fields: [batchId], references: [id])
  records   AttendanceRecord[]

  @@index([batchId])
  @@index([date])
}

model AttendanceRecord {
  id        String           @id @default(uuid())
  sessionId String
  studentId String
  status    AttendanceStatus
  notes     String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  session   AttendanceSession @relation(fields: [sessionId], references: [id])
  student   Student          @relation(fields: [studentId], references: [id])

  @@unique([sessionId, studentId])
  @@index([sessionId])
  @@index([studentId])
}

enum EducationLevel {
  HIGH_SCHOOL
  COLLEGE
  POST_GRAD
}

enum GradeLevel {
  FRESHMAN
  SOPHOMORE
  JUNIOR
  SENIOR
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  UNEXCUSED
  LATE
  EXCUSED
}

enum SubscriptionStatus {
  incomplete
  incomplete_expired
  trialing
  active
  past_due
  canceled
  unpaid
  paused
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

// Archive tables for tracking removed batches and students
model ArchivedBatch {
  id                String   @id @default(uuid())
  originalBatchId   String   @unique
  name              String
  description       String?
  isActive          Boolean
  createdAt         DateTime
  updatedAt         DateTime
  archivedAt        DateTime @default(now())
  archiveReason     String   @default("Batch cleanup")
  
  // Related archived students
  archivedStudents  ArchivedStudent[]
  
  @@index([archivedAt])
  @@index([originalBatchId])
}

model ArchivedStudent {
  id                     String             @id @default(uuid())
  originalStudentId      String             @unique
  name                   String
  email                  String?
  monthlyRate            Int
  customRate             Boolean
  status                 String
  lastPaymentDate        DateTime?
  nextPaymentDue         DateTime?
  dateOfBirth            DateTime?
  educationLevel         EducationLevel?
  gradeLevel             GradeLevel?
  highSchoolGradYear     Int?
  highSchoolGraduated    Boolean
  phone                  String?
  postGradCompleted      Boolean
  postGradYear           Int?
  schoolName             String?
  collegeGradYear        Int?
  collegeGraduated       Boolean
  originalBatchId        String
  siblingGroupId         String?
  stripeCustomerId       String?
  stripeSubscriptionId   String?
  subscriptionStatus     SubscriptionStatus?
  paidUntil              DateTime?
  createdAt              DateTime
  updatedAt              DateTime
  archivedAt             DateTime           @default(now())
  archiveReason          String             @default("Batch cleanup")
  
  // Reference to archived batch
  archivedBatch          ArchivedBatch      @relation(fields: [archivedBatchId], references: [id])
  archivedBatchId        String
  
  @@index([archivedAt])
  @@index([originalStudentId])
  @@index([originalBatchId])
  @@index([email])
  @@index([name])
}
