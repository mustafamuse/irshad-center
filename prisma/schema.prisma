generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
  output   = "./dbml"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Subject {
  id          String          @id @default(uuid())
  name        String          @unique
  description String?
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  schedules   ClassSchedule[]
}

model Semester {
  id        String          @id @default(uuid())
  name      String
  startDate DateTime
  endDate   DateTime
  isActive  Boolean         @default(true)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  schedules ClassSchedule[]
}

model ClassSchedule {
  id         String         @id @default(uuid())
  batchId    String
  subjectId  String
  semesterId String
  isActive   Boolean        @default(true)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  batch      Batch          @relation(fields: [batchId], references: [id])
  semester   Semester       @relation(fields: [semesterId], references: [id])
  subject    Subject        @relation(fields: [subjectId], references: [id])
  sessions   ClassSession[]

  @@index([batchId, subjectId])
  @@index([semesterId])
}

model ClassSession {
  id              String        @id @default(uuid())
  classScheduleId String
  date            DateTime
  startTime       DateTime
  endTime         DateTime
  status          String        @default("SCHEDULED")
  notes           String?
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  attendance      Attendance[]
  schedule        ClassSchedule @relation(fields: [classScheduleId], references: [id])

  @@index([classScheduleId])
  @@index([date])
}

model Attendance {
  id        String           @id @default(uuid())
  studentId String
  sessionId String
  status    AttendanceStatus
  notes     String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  session   ClassSession     @relation(fields: [sessionId], references: [id])
  student   Student          @relation(fields: [studentId], references: [id])

  @@unique([studentId, sessionId])
  @@index([studentId])
  @@index([sessionId])
}

model Student {
  id                  String    @id @default(uuid())
  name                String
  email               String?   @unique
  monthlyRate         Int       @default(150)
  customRate          Boolean   @default(false)
  status              String    @default("registered")
  lastPaymentDate     DateTime?
  nextPaymentDue      DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  batchId             String?
  collegeGradYear     Int?
  collegeGraduated    Boolean   @default(false)
  dateOfBirth         DateTime?
  educationLevel      EducationLevel?
  gradeLevel          GradeLevel?
  highSchoolGradYear  Int?
  highSchoolGraduated Boolean   @default(false)
  phone               String?
  postGradCompleted   Boolean   @default(false)
  postGradYear        Int?
  schoolName          String?
  siblingGroupId      String?
  stripeCustomerId    String?   @unique
  paidUntil           DateTime?

  stripeSubscriptionId String?
  subscriptionStatus   SubscriptionStatus?
  attendance           Attendance[]
  batch                Batch?              @relation(fields: [batchId], references: [id])
  siblingGroup         Sibling?            @relation(fields: [siblingGroupId], references: [id])
  StudentPayment       StudentPayment[]

  @@index([status])
  @@index([siblingGroupId])
  @@index([batchId])
  @@index([name])
  @@index([email])
  @@index([updatedAt])
  @@index([createdAt, status])
}

model Sibling {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  students  Student[]

  @@index([updatedAt])
}

model Batch {
  id             String          @id @default(uuid())
  name           String          @unique
  startDate      DateTime?
  endDate        DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  classSchedules ClassSchedule[]
  students       Student[]

  @@index([startDate])
  @@index([endDate])
  @@index([createdAt])
}

model StudentPayment {
  id               String   @id @default(dbgenerated("gen_random_uuid()"))
  studentId        String
  stripeInvoiceId  String?
  year             Int
  month            Int
  amountPaid       Int
  paidAt           DateTime @db.Timestamp(6)
  Student          Student  @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([studentId, stripeInvoiceId])
  @@index([studentId, year, month])
}

enum EducationLevel {
  HIGH_SCHOOL
  COLLEGE
  POST_GRAD
}

enum GradeLevel {
  FRESHMAN
  SOPHOMORE
  JUNIOR
  SENIOR
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum SubscriptionStatus {
  incomplete
  incomplete_expired
  trialing
  active
  past_due
  canceled
  unpaid
  paused
}
