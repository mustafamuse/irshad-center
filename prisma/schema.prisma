generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model ArchivedBatch {
  id              String            @id
  originalBatchId String            @unique
  name            String
  description     String?
  isActive        Boolean
  createdAt       DateTime
  updatedAt       DateTime
  archivedAt      DateTime          @default(now())
  archiveReason   String            @default("Batch cleanup")
  ArchivedStudent ArchivedStudent[]

  @@index([archivedAt])
  @@index([originalBatchId])
}

model ArchivedStudent {
  id                   String              @id
  originalStudentId    String              @unique
  name                 String
  email                String?
  monthlyRate          Int
  customRate           Boolean
  status               String
  lastPaymentDate      DateTime?
  nextPaymentDue       DateTime?
  dateOfBirth          DateTime?
  educationLevel       EducationLevel?
  gradeLevel           GradeLevel?
  highSchoolGradYear   Int?
  highSchoolGraduated  Boolean
  phone                String?
  postGradCompleted    Boolean
  postGradYear         Int?
  schoolName           String?
  collegeGradYear      Int?
  collegeGraduated     Boolean
  originalBatchId      String
  siblingGroupId       String?
  stripeCustomerId     String?
  stripeSubscriptionId String?
  subscriptionStatus   SubscriptionStatus?
  paidUntil            DateTime?
  createdAt            DateTime
  updatedAt            DateTime
  archivedAt           DateTime            @default(now())
  archiveReason        String              @default("Batch cleanup")
  archivedBatchId      String
  ArchivedBatch        ArchivedBatch       @relation(fields: [archivedBatchId], references: [id])

  @@index([archivedAt])
  @@index([email])
  @@index([name])
  @@index([originalBatchId])
  @@index([originalStudentId])
}

model Attendance {
  id           String           @id
  studentId    String
  sessionId    String
  status       AttendanceStatus
  notes        String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime
  ClassSession ClassSession     @relation(fields: [sessionId], references: [id])
  Student      Student          @relation(fields: [studentId], references: [id])

  @@unique([studentId, sessionId])
  @@index([sessionId])
  @@index([studentId])
}

model AttendanceRecord {
  id                String            @id @default(uuid())
  sessionId         String
  studentId         String
  status            AttendanceStatus
  notes             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  checkInMethod     CheckInMethod     @default(MANUAL)
  checkedInAt       DateTime?
  AttendanceSession AttendanceSession @relation(fields: [sessionId], references: [id])
  Student           Student           @relation(fields: [studentId], references: [id])

  @@unique([sessionId, studentId])
  @@index([sessionId])
  @@index([studentId])
}

model AttendanceSession {
  id               String             @id @default(uuid())
  date             DateTime
  batchId          String
  notes            String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  allowSelfCheckIn Boolean            @default(false)
  qrTokens         Json?
  AttendanceRecord AttendanceRecord[]
  Batch            Batch              @relation(fields: [batchId], references: [id])

  @@index([batchId])
  @@index([date])
}

model Batch {
  id                String              @id @default(uuid())
  name              String              @unique
  startDate         DateTime?
  endDate           DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  AttendanceSession AttendanceSession[]
  ClassSchedule     ClassSchedule[]
  Student           Student[]

  @@index([createdAt])
  @@index([endDate])
  @@index([startDate])
}

model ClassSchedule {
  id           String         @id
  batchId      String
  subjectId    String
  semesterId   String
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  daysOfWeek   DayOfWeek[]
  endTime      String
  startTime    String
  teacherId    String?
  Batch        Batch          @relation(fields: [batchId], references: [id])
  Semester     Semester       @relation(fields: [semesterId], references: [id])
  Subject      Subject        @relation(fields: [subjectId], references: [id])
  Teacher      Teacher?       @relation(fields: [teacherId], references: [id])
  ClassSession ClassSession[]

  @@unique([batchId, subjectId])
  @@index([semesterId])
  @@index([teacherId])
}

model ClassSession {
  id              String        @id
  classScheduleId String
  date            DateTime
  startTime       DateTime
  endTime         DateTime
  status          String        @default("SCHEDULED")
  notes           String?
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime
  Attendance      Attendance[]
  ClassSchedule   ClassSchedule @relation(fields: [classScheduleId], references: [id])

  @@index([classScheduleId])
  @@index([createdAt, status])
  @@index([date])
}

model Semester {
  id            String          @id
  name          String          @unique
  startDate     DateTime
  endDate       DateTime
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  ClassSchedule ClassSchedule[]
}

model Sibling {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Student   Student[]

  @@index([updatedAt])
}

model Student {
  id                   String              @id @default(uuid())
  name                 String
  email                String?             @unique
  monthlyRate          Int                 @default(150)
  customRate           Boolean             @default(false)
  status               String              @default("registered")
  lastPaymentDate      DateTime?
  nextPaymentDue       DateTime?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  batchId              String?
  collegeGradYear      Int?
  collegeGraduated     Boolean             @default(false)
  dateOfBirth          DateTime?
  educationLevel       EducationLevel?
  gradeLevel           GradeLevel?
  highSchoolGradYear   Int?
  highSchoolGraduated  Boolean             @default(false)
  phone                String?
  postGradCompleted    Boolean             @default(false)
  postGradYear         Int?
  schoolName           String?
  siblingGroupId       String?
  stripeCustomerId     String?             @unique
  stripeSubscriptionId String?
  subscriptionStatus   SubscriptionStatus?
  paidUntil            DateTime?
  healthInfo           String?
  parent2Email         String?
  parent2FirstName     String?
  parent2LastName      String?
  parent2Phone         String?
  parentEmail          String?
  parentFirstName      String?
  parentLastName       String?
  parentPhone          String?
  program              Program             @default(MAHAD_PROGRAM)
  gender               Gender?
  Attendance           Attendance[]
  AttendanceRecord     AttendanceRecord[]
  Batch                Batch?              @relation(fields: [batchId], references: [id])
  Sibling              Sibling?            @relation(fields: [siblingGroupId], references: [id])
  StudentPayment       StudentPayment[]

  @@unique([name, dateOfBirth])
  @@index([batchId])
  @@index([createdAt, status])
  @@index([email])
  @@index([name])
  @@index([parentEmail])
  @@index([parentPhone])
  @@index([siblingGroupId])
  @@index([status])
  @@index([updatedAt])
}

model StudentPayment {
  id              String   @id @default(dbgenerated("gen_random_uuid()"))
  studentId       String
  year            Int
  month           Int
  amountPaid      Int
  paidAt          DateTime @db.Timestamp(6)
  stripeInvoiceId String?
  Student         Student  @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([studentId, stripeInvoiceId])
  @@index([studentId, year, month])
}

model Subject {
  id            String          @id
  name          String          @unique
  description   String?
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  ClassSchedule ClassSchedule[]
}

model Teacher {
  id            String          @id
  name          String
  email         String          @unique
  phone         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  ClassSchedule ClassSchedule[]
}

enum AttendanceStatus {
  PRESENT
  UNEXCUSED
  LATE
  EXCUSED
  ABSENT
}

enum CheckInMethod {
  MANUAL
  QR_CODE
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum EducationLevel {
  HIGH_SCHOOL
  COLLEGE
  POST_GRAD
  ELEMENTARY
  MIDDLE_SCHOOL
}

enum GradeLevel {
  FRESHMAN
  SOPHOMORE
  JUNIOR
  SENIOR
  KINDERGARTEN
  GRADE_1
  GRADE_2
  GRADE_3
  GRADE_4
  GRADE_5
  GRADE_6
  GRADE_7
  GRADE_8
  GRADE_9
  GRADE_10
  GRADE_11
  GRADE_12
}

enum SubscriptionStatus {
  incomplete
  incomplete_expired
  trialing
  active
  past_due
  canceled
  unpaid
  paused
}

enum Program {
  MAHAD_PROGRAM
  DUGSI_PROGRAM
}

enum Gender {
  MALE
  FEMALE
}
