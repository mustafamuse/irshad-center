generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Education level enum
enum EducationLevel {
  HIGH_SCHOOL
  COLLEGE
  POST_GRAD
}

// Grade level enum
enum GradeLevel {
  FRESHMAN
  SOPHOMORE
  JUNIOR
  SENIOR
}

model Student {
  id                String          @id @default(uuid())
  // Personal Info
  name              String
  email             String?
  phone             String?
  dateOfBirth       DateTime?
  
  // Education Info
  educationLevel    EducationLevel?
  gradeLevel        GradeLevel?
  schoolName        String?         // Name of school/university/college
  
  // Graduation Status
  highSchoolGraduated    Boolean   @default(false)
  highSchoolGradYear     Int?
  collegeGraduated       Boolean   @default(false)
  collegeGradYear        Int?
  postGradCompleted      Boolean   @default(false)
  postGradYear           Int?
  
  // Existing Fields
  batchId           String?     
  monthlyRate       Int         @default(150)
  customRate        Boolean     @default(false)
  status            String      @default("registered") // registered, enrolled, on_leave, withdrawn
  payerId           String?     // Optional link to current payer
  siblingGroupId    String?     // For sibling grouping
  lastPaymentDate   DateTime?   // Track last successful payment
  nextPaymentDue    DateTime?   // Track next payment due
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  payer             Payer?      @relation(fields: [payerId], references: [id])
  siblingGroup      Sibling?    @relation(fields: [siblingGroupId], references: [id])
  batch             Batch?      @relation(fields: [batchId], references: [id])

  @@index([status])
}

model Payer {
  id                String    @id @default(uuid())
  name              String
  email             String    @unique
  phone             String
  stripeCustomerId  String    @unique
  relationship      String?   // Nullable relationship field
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  students          Student[]
  subscriptions     Subscription[]
}

model Sibling {
  id                String    @id @default(uuid())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  students          Student[]
}

model Batch {
  id                String    @id @default(uuid())
  name              String    @unique // e.g. "Quran Level 1 - Sunday 10AM"
  startDate         DateTime?
  endDate           DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  students          Student[]
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  INACTIVE
  INCOMPLETE      // Add back for backward compatibility
  TRIALING       // Add back for future use
}

model Subscription {
  id                  String             @id @default(uuid())
  stripeSubscriptionId String            @unique
  payerId             String            
  status              SubscriptionStatus @default(ACTIVE)
  
  // Payment tracking
  lastPaymentDate     DateTime?
  nextPaymentDate     DateTime?
  currentPeriodStart  DateTime?
  currentPeriodEnd    DateTime?
  
  // Error handling
  paymentRetryCount   Int               @default(0)
  lastPaymentError    String?
  gracePeriodEndsAt   DateTime?

  // Audit
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  // Relations
  payer               Payer             @relation(fields: [payerId], references: [id])
  
  @@index([status])
  @@index([payerId])
  @@index([stripeSubscriptionId])
}
